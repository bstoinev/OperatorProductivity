@using Powerfront.BackendTest.Models

@model OperatorReportViewModelRef

@{
    ViewBag.Title = "Operator Report";

    var deviceListItems = new List<SelectListItem>
{
new SelectListItem { Text = "[ Any ]", Value = "Any", Selected = true }
};

    deviceListItems.AddRange(Model.DeviceList.Select(d => new SelectListItem { Text = d, Value = d }));

    var websiteListItems = new List<SelectListItem>
{
new SelectListItem { Text = "[ Any ]", Value = "Any", Selected = true }
};

    websiteListItems.AddRange(Model.WebsiteList.Select(w => new SelectListItem { Text = w, Value = w }));

    var predefinedPeriodListItems = new List<SelectListItem>
{
new SelectListItem { Text = "[ None ]", Value = "None", Disabled = true }
};

    predefinedPeriodListItems.AddRange(Model.PredefinedDateFilter.Select(kvp => new SelectListItem { Text = kvp.Key, Value = kvp.Value }));
}

<link href="~/Content/bootstrap-datepicker3.css" rel="stylesheet" />

<h2>Operator Report</h2>

<div class="row">
    <div class="col-2">
        <div id="predefinedPeriodFilterRadio" class="radio">
            <label>
                @Html.RadioButton("PeriodFilterType", "pre-defined", true)
                Pre-defined
            </label>
        </div>

        <div id="customPeriodFilterRadio" class="radio">
            <label>
                @Html.RadioButton("PeriodFilterType", "custom")
                Custom
            </label>
        </div>
    </div>

    <div class="col-3">
        <div id="predefinedPeriodHandles">
            @Html.DropDownListFor(m => m.PredefinedDateFilter, predefinedPeriodListItems, new { id = "periodMaskDropDown", @class = "form-control" })
        </div>

        <div id="customPeriodHandles" class="d-none">
            <div class="row">
                <div class="col-8">
                    @Html.TextBoxFor(m => m.StartDate, new { id = "startDateInput", @class = "form-control", placeholder = "Start Date" })
                    <br />
                    @Html.TextBoxFor(m => m.EndDate, new { id = "endDateInput", @class = "form-control", placeholder = "End Date" })
                </div>
                <div class="col-4">
                    <button id="applyPeriodButton" type="button" class="btn btn-secondary">Apply</button>
                </div>
            </div>
        </div>
    </div>

    <div class="col-2 text-right">
        <label class="col-form-label">
            Device
        </label>

        <br />
        <br />
        <label class="col-form-label">
            Website
        </label>
    </div>

    <div class="col-3">
        @Html.DropDownListFor(m => m.DeviceList, deviceListItems, new { id = "deviceDropDown", @class = "form-control" })
        <br />
        @Html.DropDownListFor(m => m.WebsiteList, websiteListItems, new { id = "websiteDropDown", @class = "form-control" })
    </div>
</div>

<br />

<span class="text-info">HINT: The sample data is found in March, 2017</span>
<div id="reportArea">
    @if (Model.Rows != null && Model.Rows.Count() > 0)
    {
        Html.Partial("_ProductivityReportTable", Model.Rows);
    }
</div>
<br />

@using (Html.BeginForm("ProductivityReportCsv", "Operator", FormMethod.Post, new { id = "exportForm" }))
{
    @Html.AntiForgeryToken()
    <input type="hidden" name="filterDump" />
    <input type="submit" class="btn btn-secondary" value="CSV Export" />
}

<span id="exportFeedback" class="invisible"></span>

@section Scripts {
    <script src="~/Scripts/bootstrap-datepicker.min.js"></script>

    <script>
        $(document).ready(Document_Ready);

        function ApplyFilter() {
            var payload = PrepareFilter();

            debugger;

            if (IsValidFilter(payload)) {
                var settings = {
                    type: "POST",
                    contentType: "application/json",
                    url: "/Operator/ProductivityReportTable",
                    data: JSON.stringify(payload)
                };

                settings.success = function (response) {
                    $(reportArea).html(response);
                };

                settings.error = function (response) {
                    $(reportArea).html("<span class='text-danger'>Error occured!</span>");
                };

                settings.complete = function (response) {
                    $("body").css("cursor", "default");
                }

                $("body").css("cursor", "wait");
                $.ajax(settings);
            }
        }

        function CsvExport() {
            $(exportFeedback).addClass("invisible");

            var filter = PrepareFilter();

            if (IsValidFilter(filter)) {
                $(exportForm).children("input[name=filterDump]").val(JSON.stringify(filter));
            }
        }

        function Document_Ready(e) {
            var calendarDefaults = {
                autoclose: true,
                todayHighlight: true,
                todayBtn: "linked",
                endDate: new Date(2018, 4, 13)
            };

            $(startDateInput).datepicker(calendarDefaults);
            $(endDateInput).datepicker(calendarDefaults);

            $(periodMaskDropDown)
                .children()
                .filter(function () { return $(this).html() == "Last Month"; })
                .prop("selected", true)
            ;

            ApplyFilter();

            $(".radio").on("click", PeriodMaskRadio_Click);

            $(deviceDropDown).on("change", ApplyFilter);
            $(periodMaskDropDown).on("change", ApplyFilter);
            $(websiteDropDown).on("change", ApplyFilter);
            $(applyPeriodButton).on("click", ApplyFilter);
            $(exportForm).submit(CsvExport);
        }

        function PeriodMaskRadio_Click(e) {
            var sender = $(e.target).closest("div");

            if (sender.is(predefinedPeriodFilterRadio)) {
                $(customPeriodHandles).addClass("d-none");
                $(predefinedPeriodHandles).removeClass("d-none");
            }
            else if (sender.is(customPeriodFilterRadio)) {
                $(predefinedPeriodHandles).addClass("d-none");
                $(customPeriodHandles).removeClass("d-none");
            }
        }

        function PrepareFilter() {
            var result = {
                Device: $(deviceDropDown).val() == "Any" ? null : $(deviceDropDown).val(),
                EndDate: $(endDateInput).val().trim() == "" ? null : $(endDateInput).datepicker("getDate"),
                StartDate: $(startDateInput).val().trim() == "" ? null : $(startDateInput).datepicker("getDate"),
                Website: $(websiteDropDown).val() == "Any" ? null : $(websiteDropDown).val()
            };

            if ($("input[name=PeriodFilterType]:checked").val() === "pre-defined") {
                var ma = $(periodMaskDropDown).val().split("/");

                ma.length > 0 && (result.StartDate = new Date(parseInt(ma[0])));
                ma.length > 1 && (result.EndDate = new Date(parseInt(ma[1])));
            }

            return result;
        }

        function IsValidFilter(filter) {
            var result = filter.EndDate == null || (filter.EndDate > filter.StartDate);

            if (filter.EndDate && (filter.EndDate < filter.StartDate)) {
                alert("Invalid period. End Date must be greater than Start Date.");
            }

            return result;
        }
    </script>
}